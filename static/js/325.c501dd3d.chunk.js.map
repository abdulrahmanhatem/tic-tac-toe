{"version":3,"file":"static/js/325.c501dd3d.chunk.js","mappings":"qJAAe,SAASA,EAAgBC,GACpC,IAAIC,EAAU,GACd,MAAMC,EAAO,CACX,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEP,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,MAAOE,EAAGC,EAAGC,GAAKL,EAAMC,GACpBH,EAAQK,IAAML,EAAQK,KAAOL,EAAQM,IAAMN,EAAQK,KAAOL,EAAQO,KAEpEN,EAAUA,EAAQO,OAAON,EAAMC,IAEnC,CAEA,OAAIF,EAAQG,OACDH,EAEJ,IACT,CCxBK,MAAMQ,EAAM,gGACNC,EAAI,8FACJC,EAAK,8FACLC,EAAO,iGACPC,EAAO,iGCFL,SAASC,EAASC,GAA0B,IACnDC,EAD+BC,EAAMC,UAAAd,OAAA,QAAAe,IAAAD,UAAA,GAAAA,UAAA,GAAC,GAAIE,EAAMF,UAAAd,OAAA,EAAAc,UAAA,QAAAC,EAEpD,OAAQJ,GACJ,IAAK,MACDC,EAAQP,EACR,MACJ,IAAK,OACDO,EAAQJ,EACR,MACJ,IAAK,IACDI,EAAQL,EACR,MACJ,IAAK,IACDK,EAAQN,EACR,MACJ,IAAK,OACDM,EAAQH,EAKhB,GAAIG,IACKI,EAAQ,CACT,MAAMC,EAAW,IAAIC,MAAMN,GACvBC,IACAI,EAASJ,OAASA,EAAS,KAG/BI,EAASE,OAAOC,OAAMC,GAAKC,QAAQC,IAAI,gBAC3C,CAER,CCvBO,SAASC,EAAaC,GAAmB,IAAXC,EAAMZ,UAAAd,OAAA,QAAAe,IAAAD,UAAA,GAAAA,UAAA,GAAC,EACpCa,EAAYC,aAAaC,QAAQ,UACrC,GAAIF,EAAW,CACXA,EAAYG,KAAKC,MAAMJ,GACvB,IAAIK,EAAQL,EAAUF,GAAUE,EAAUF,GAAU,EAChDQ,EAAWP,EAAS,EAAI,EAC5BC,EAAY,IAAIA,EAAW,CAACF,GAAUO,EAAQC,GAC9CL,aAAaM,QAAQ,SAAUJ,KAAKK,UAAUR,GAClD,MACIC,aAAaM,QAAQ,SAAUJ,KAAKK,UAAU,CAAC,CAACV,GAAQ,IAEhE,C,aCpBA,MAAMW,GAAQC,EAAAA,EAAAA,OAAK,IAAM,gCACnBC,GAAWD,EAAAA,EAAAA,OAAK,IAAM,qCAK5B,SAASE,EAAMC,GAA8B,IAA7B,MAACC,EAAK,cAAEC,EAAa,IAAErC,GAAImC,EACvC,OAAOG,EAAAA,EAAAA,KAAA,QAAMC,UAAS,UAAAxC,OAAYC,EAAM,MAAQ,IAAMwC,QAASH,EAAcI,SAAEL,IAASE,EAAAA,EAAAA,KAAA,QAAAG,SAAOL,KACnG,CAEe,SAASM,EAAKC,GAAoD,IAAnD,QAACC,EAAO,QAAErD,EAAO,OAAEsD,EAAM,WAAEC,EAAU,SAAEC,GAASJ,EAC1E,MAAOK,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,UAACC,EAAS,UAAEC,GAAaL,EACzBM,EDbH,WACH,IAAI/B,EAAYC,aAAaC,QAAQ,UACrC,OAAIF,EACOG,KAAKC,MAAMJ,GAEX,CAAC,EAAK,EAAG,EAAK,EAAG,KAAO,EAEvC,CCMmBgC,GAEf,IAAI9D,EAAS+D,EAAMC,EAKnB,GAHAhE,EAAUF,EAAgBC,GAC1BgE,EAAOhE,EAAQkE,OAAM/D,GAAW,OAANA,IAEvBF,EAAQ,CAEPgE,EAAS,YADShE,EAAQG,OAAS,EACA,mBAAqB,IAAMJ,EAAQC,EAAQ,GAClF,MAEQgE,EADDD,EACU,QAEA,eAAiBX,EAAU,IAAM,KA6ClD,OACIc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAlB,SAAA,EACAiB,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,OAAME,SAAA,CACpBlD,EAAQqE,KAAI,CAACC,EAAQnE,KAClB,IAAIM,EAKJ,OAJIR,IACAQ,IAAMR,EAAQsE,SAASpE,KAGpB4C,EAAAA,EAAAA,KAACJ,EAAM,CAACE,MAAO7C,EAAQG,GAAI2C,cAAeA,IAjDzD,SAAsB3C,GACbsD,GAEDC,GAAW,GAGf,MAAMc,EAAcxE,EAAQyE,QAExBzE,EAAQG,IAAMF,EAEda,EAAS,OAAQ+C,EAAWD,IAKhCL,EAAWpD,GACXqE,EAAYrE,GAAKkD,EAAU,IAAM,IACjCvC,EAAUuC,EAAU,IAAM,IAAMQ,EAAWD,GAE3C3D,EAAUF,EAAgByE,GAC1BR,EAAOQ,EAAYN,OAAM/D,GAAW,OAANA,IAC3BF,GACCa,EAAS,MAAO+C,EAAWD,GACT3D,EAAQG,OAAS,EAE/BwB,EAAa4C,EAAYrE,GAAI,UAE7ByB,EAAa4C,EAAYrE,KAI1B6D,IACClD,EAAS,OAAQ+C,EAAWD,GAC5BhC,EAAa,SAIrB0B,EAAOkB,GACX,CAW+DE,CAAYvE,GAAYM,IAAKA,EAAMkE,UAAWpB,GAAzBpD,EAAsC,KAEtH4C,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAACC,UAAU9B,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,IAAMlB,UACtBH,EAAAA,EAAAA,KAACP,EAAK,CAACJ,MAAO,UAIlBW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQE,SAAEe,KACzBE,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,UAASE,SAAA,EACpBiB,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,SAAQE,SAAA,EACnBH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,OACNH,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOE,SAAEY,EAAOgB,EAAIhB,EAAOgB,EAAI,QAEnDX,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,SAAQE,SAAA,EACnBH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,OACNH,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOE,SAAEY,EAAOiB,EAAGjB,EAAOiB,EAAI,QAElDZ,EAAAA,EAAAA,MAAA,OAAKnB,UAAU,SAAQE,SAAA,EACnBH,EAAAA,EAAAA,KAAA,QAAAG,SAAM,UACNH,EAAAA,EAAAA,KAAA,QAAMC,UAAU,QAAOE,SAAEY,EAAOlD,KAAMkD,EAAOlD,KAAO,UAI3DX,IACG8C,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAACC,UAAU9B,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,IAAMlB,UACtBH,EAAAA,EAAAA,KAACL,EAAQ,CAACM,UAAU,WACpBgC,eAAgB,IAChBC,OAAQ,CAAC,UAAW,OAAQ,QAC5BC,cAAe,IACfC,SAAS,QAMzB,C","sources":["helpers/calculateWinner.js","assets/sounds/index.js","hooks/useSound.js","helpers/result.js","components/Board.js"],"sourcesContent":["export default function calculateWinner(squares){\r\n    let winners = []\r\n    const lines =[\r\n      [0,1,2], \r\n      [3,4,5],\r\n      [6,7,8],\r\n      [0,3,6],\r\n      [1,4,7],\r\n      [2,5,8],\r\n      [0,4,8],\r\n      [2,4,6]\r\n    ]\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        \r\n        winners = winners.concat(lines[i])\r\n      }\r\n    }\r\n    \r\n    if (winners.length) {\r\n        return winners;\r\n    }\r\n    return null\r\n  }","export const win = \"https://raw.githubusercontent.com/abdulrahmanhatem/tic-tac-toe/main/src/assets/sounds/win.mp3\";\r\nexport const x = \"https://raw.githubusercontent.com/abdulrahmanhatem/tic-tac-toe/main/src/assets/sounds/x.mp3\";\r\nexport const o =  \"https://raw.githubusercontent.com/abdulrahmanhatem/tic-tac-toe/main/src/assets/sounds/o.mp3\";\r\nexport const draw = \"https://raw.githubusercontent.com/abdulrahmanhatem/tic-tac-toe/main/src/assets/sounds/draw.mp3\";\r\nexport const buzz = \"https://raw.githubusercontent.com/abdulrahmanhatem/tic-tac-toe/main/src/assets/sounds/buzz.mp3\";\r\n\r\n","import {background, x, o, win, draw, buzz} from \"../assets/sounds\";\r\n\r\nexport default function useSound(type, volume=50, isMute) {\r\n    let sound;\r\n    switch (type) {\r\n        case \"win\":\r\n            sound = win;\r\n            break;\r\n        case \"draw\":\r\n            sound = draw;\r\n            break;\r\n        case \"o\":\r\n            sound = o;\r\n            break;\r\n        case \"x\":\r\n            sound = x;\r\n            break;\r\n        case \"buzz\":\r\n            sound = buzz;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if (sound) {\r\n        if (!isMute) {\r\n            const audioObj = new Audio(sound);\r\n            if (volume) {\r\n                audioObj.volume = volume / 100;\r\n            }\r\n            \r\n            audioObj.play().catch(e => console.log(\"No Interact\"))\r\n        }\r\n    }\r\n}\r\n","\r\nexport function getResult() {\r\n    let resultObj = localStorage.getItem(\"result\");\r\n    if (resultObj) {\r\n        return JSON.parse(resultObj);\r\n    }else{\r\n        return {\"X\": 0, \"O\": 0, \"draw\":0}\r\n    }\r\n}\r\n\r\nexport function updateResult(winner, double=0) {\r\n    let resultObj = localStorage.getItem(\"result\");\r\n    if (resultObj) {\r\n        resultObj = JSON.parse(resultObj);   \r\n        let count = resultObj[winner] ? resultObj[winner] : 0;\r\n        let addition = double ? 2 : 1;\r\n        resultObj = {...resultObj, [winner]: (count + addition)}\r\n        localStorage.setItem(\"result\", JSON.stringify(resultObj))\r\n    }else{\r\n        localStorage.setItem(\"result\", JSON.stringify({[winner]:1}))\r\n    }\r\n}\r\n","import { useState, useEffect, lazy, Suspense } from 'react'\r\nconst Lines = lazy(() => import('./Lines'))\r\nconst Confetti = lazy(() => import('react-confetti'))\r\nimport calculateWinner from '../helpers/calculateWinner';\r\nimport useSound from '../hooks/useSound';\r\nimport { updateResult, getResult } from \"../helpers/result\";\r\n\r\nfunction Square({value, onSquareClick, win}){\r\n    return <span className={`square ${win ? \"win\" : \"\"}`} onClick={onSquareClick}>{value && <span>{value}</span>}</span>;\r\n}\r\n\r\nexport default function Board({xIsNext, squares, onPlay, getCurrent, settings}) {\r\n    const [startBg, setStartBg] = useState(false)\r\n    const {isSFXMute, sFXVolume} = settings;\r\n    const result = getResult();\r\n\r\n    let winners, full, status ;\r\n\r\n    winners = calculateWinner(squares);\r\n    full = squares.every(i => i !== null);\r\n\r\n    if(winners){\r\n        const doubleWin = winners.length > 3;\r\n        status = \"Winner: \" + (doubleWin ? \" Double Win for \" : \"\") + squares[winners[0]];\r\n    }else{\r\n        if(full){\r\n            status = \"Draw!\";\r\n        }else{\r\n            status = \"Next turn: \" + (xIsNext ? \"X\" : \"O\");\r\n        }\r\n    }\r\n    \r\n\r\n    function handleClick (i) {\r\n        if (!startBg) {\r\n            \r\n            setStartBg(true)\r\n        }\r\n        \r\n        const nextSquares = squares.slice();  \r\n\r\n        if (squares[i] || winners){\r\n            \r\n            useSound(\"buzz\", sFXVolume, isSFXMute)\r\n            return;\r\n        }\r\n\r\n\r\n        getCurrent(i)\r\n        nextSquares[i] = xIsNext ? \"X\" : \"O\";\r\n        useSound((xIsNext ? \"x\" : \"o\"), sFXVolume, isSFXMute);\r\n\r\n        winners = calculateWinner(nextSquares);\r\n        full = nextSquares.every(i => i !== null);\r\n        if(winners){\r\n            useSound(\"win\", sFXVolume, isSFXMute)\r\n            const doubleWin = winners.length > 3;\r\n            if (doubleWin) {\r\n                updateResult(nextSquares[i], \"double\")\r\n            }else{\r\n                updateResult(nextSquares[i])\r\n            }\r\n            \r\n        }else{\r\n            if(full){\r\n                useSound(\"draw\", sFXVolume, isSFXMute)\r\n                updateResult(\"draw\")\r\n            }\r\n        }\r\n        \r\n        onPlay(nextSquares);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"list\">\r\n        {squares.map((square, i) => {\r\n            let win;\r\n            if (winners) {\r\n                win = winners.includes(i) ? true : false;\r\n            }\r\n            \r\n            return <Square value={squares[i]} onSquareClick={() => handleClick(i)} key={i} win={win}  getSquare={getCurrent}/>;\r\n        })}\r\n        <Suspense fallback={<></>}>\r\n            <Lines count={4}/>\r\n        </Suspense>\r\n        \r\n        </div>\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"results\">\r\n            <div className='result'>\r\n                <span>X</span>\r\n                <span className='value'>{result.X ? result.X : 0}</span>\r\n            </div>\r\n            <div className='result'>\r\n                <span>O</span>\r\n                <span className='value'>{result.O? result.O : 0}</span>\r\n            </div>\r\n            <div className='result'>\r\n                <span>Draw</span>\r\n                <span className='value'>{result.draw? result.draw : 0}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        {winners && \r\n            <Suspense fallback={<></>}>\r\n                <Confetti className=\"confetti\"\r\n                numberOfPieces={500} \r\n                colors={[\"#dcb288\", \"#444\", \"#000\"]} \r\n                tweenDuration={10000}\r\n                recycle={false}\r\n                />\r\n            </Suspense>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n  "],"names":["calculateWinner","squares","winners","lines","i","length","a","b","c","concat","win","x","o","draw","buzz","useSound","type","sound","volume","arguments","undefined","isMute","audioObj","Audio","play","catch","e","console","log","updateResult","winner","double","resultObj","localStorage","getItem","JSON","parse","count","addition","setItem","stringify","Lines","lazy","Confetti","Square","_ref","value","onSquareClick","_jsx","className","onClick","children","Board","_ref2","xIsNext","onPlay","getCurrent","settings","startBg","setStartBg","useState","isSFXMute","sFXVolume","result","getResult","full","status","every","_jsxs","_Fragment","map","square","includes","nextSquares","slice","handleClick","getSquare","Suspense","fallback","X","O","numberOfPieces","colors","tweenDuration","recycle"],"sourceRoot":""}